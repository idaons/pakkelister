{"version":3,"file":"static/chunks/106-d45aeab020b4b8b0.js","mappings":"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","sources":["webpack://_N_E/../../../../src/client/components/router-reducer/router-reducer-types.ts","webpack://_N_E/../../src/client/get-domain-locale.ts","webpack://_N_E/../../src/client/link.tsx","webpack://_N_E/../../src/client/use-intersection.tsx","webpack://_N_E/../../src/client/use-merged-ref.ts","webpack://_N_E/./node_modules/next/link.js"],"sourcesContent":["import type { CacheNode } from '../../../shared/lib/app-router-context.shared-runtime'\nimport type {\n  FlightRouterState,\n  FlightSegmentPath,\n} from '../../../server/app-render/types'\nimport type { FetchServerResponseResult } from './fetch-server-response'\n\nexport const ACTION_REFRESH = 'refresh'\nexport const ACTION_NAVIGATE = 'navigate'\nexport const ACTION_RESTORE = 'restore'\nexport const ACTION_SERVER_PATCH = 'server-patch'\nexport const ACTION_PREFETCH = 'prefetch'\nexport const ACTION_HMR_REFRESH = 'hmr-refresh'\nexport const ACTION_SERVER_ACTION = 'server-action'\n\nexport type RouterChangeByServerResponse = ({\n  previousTree,\n  serverResponse,\n}: {\n  previousTree: FlightRouterState\n  serverResponse: FetchServerResponseResult\n}) => void\n\nexport type RouterNavigate = (\n  href: string,\n  navigateType: 'push' | 'replace',\n  shouldScroll: boolean\n) => void\n\nexport interface Mutable {\n  mpaNavigation?: boolean\n  patchedTree?: FlightRouterState\n  canonicalUrl?: string\n  scrollableSegments?: FlightSegmentPath[]\n  pendingPush?: boolean\n  cache?: CacheNode\n  prefetchCache?: AppRouterState['prefetchCache']\n  hashFragment?: string\n  shouldScroll?: boolean\n  preserveCustomHistoryState?: boolean\n  onlyHashChange?: boolean\n}\n\nexport interface ServerActionMutable extends Mutable {\n  inFlightServerAction?: Promise<any> | null\n}\n\n/**\n * Refresh triggers a refresh of the full page data.\n * - fetches the Flight data and fills rsc at the root of the cache.\n * - The router state is updated at the root.\n */\nexport interface RefreshAction {\n  type: typeof ACTION_REFRESH\n  origin: Location['origin']\n}\n\nexport interface HmrRefreshAction {\n  type: typeof ACTION_HMR_REFRESH\n  origin: Location['origin']\n}\n\nexport type ServerActionDispatcher = (\n  args: Omit<\n    ServerActionAction,\n    'type' | 'mutable' | 'navigate' | 'changeByServerResponse' | 'cache'\n  >\n) => void\n\nexport interface ServerActionAction {\n  type: typeof ACTION_SERVER_ACTION\n  actionId: string\n  actionArgs: any[]\n  resolve: (value: any) => void\n  reject: (reason?: any) => void\n}\n\n/**\n * Navigate triggers a navigation to the provided url. It supports two types: `push` and `replace`.\n *\n * `navigateType`:\n * - `push` - pushes a new history entry in the browser history\n * - `replace` - replaces the current history entry in the browser history\n *\n * Navigate has multiple cache heuristics:\n * - page was prefetched\n *  - Apply router state tree from prefetch\n *  - Apply Flight data from prefetch to the cache\n *  - If Flight data is a string, it's a redirect and the state is updated to trigger a redirect\n *  - Check if hard navigation is needed\n *    - Hard navigation happens when a dynamic parameter below the common layout changed\n *    - When hard navigation is needed the cache is invalidated below the flightSegmentPath\n *    - The missing cache nodes of the page will be fetched in layout-router and trigger the SERVER_PATCH action\n *  - If hard navigation is not needed\n *    - The cache is reused\n *    - If any cache nodes are missing they'll be fetched in layout-router and trigger the SERVER_PATCH action\n * - page was not prefetched\n *  - The navigate was called from `next/router` (`router.push()` / `router.replace()`) / `next/link` without prefetched data available (e.g. the prefetch didn't come back from the server before clicking the link)\n *    - Flight data is fetched in the reducer (suspends the reducer)\n *    - Router state tree is created based on Flight data\n *    - Cache is filled based on the Flight data\n *\n * Above steps explain 3 cases:\n * - `soft` - Reuses the existing cache and fetches missing nodes in layout-router.\n * - `hard` - Creates a new cache where cache nodes are removed below the common layout and fetches missing nodes in layout-router.\n * - `optimistic` (explicit no prefetch) - Creates a new cache and kicks off the data fetch in the reducer. The data fetch is awaited in the layout-router.\n */\nexport interface NavigateAction {\n  type: typeof ACTION_NAVIGATE\n  url: URL\n  isExternalUrl: boolean\n  locationSearch: Location['search']\n  navigateType: 'push' | 'replace'\n  shouldScroll: boolean\n  allowAliasing: boolean\n}\n\n/**\n * Restore applies the provided router state.\n * - Used for `popstate` (back/forward navigation) where a known router state has to be applied.\n * - Also used when syncing the router state with `pushState`/`replaceState` calls.\n * - Router state is applied as-is from the history state, if available.\n * - If the history state does not contain the router state, the existing router state is used.\n * - If any cache node is missing it will be fetched in layout-router during rendering and the server-patch case.\n * - If existing cache nodes match these are used.\n */\nexport interface RestoreAction {\n  type: typeof ACTION_RESTORE\n  url: URL\n  tree: FlightRouterState | undefined\n}\n\n/**\n * Server-patch applies the provided Flight data to the cache and router tree.\n * - Only triggered in layout-router.\n * - Creates a new cache and router state with the Flight data applied.\n */\nexport interface ServerPatchAction {\n  type: typeof ACTION_SERVER_PATCH\n  serverResponse: FetchServerResponseResult\n  previousTree: FlightRouterState\n}\n\n/**\n * PrefetchKind defines the type of prefetching that should be done.\n * - `auto` - if the page is dynamic, prefetch the page data partially, if static prefetch the page data fully.\n * - `full` - prefetch the page data fully.\n * - `temporary` - a temporary prefetch entry is added to the cache, this is used when prefetch={false} is used in next/link or when you push a route programmatically.\n */\n\nexport enum PrefetchKind {\n  AUTO = 'auto',\n  FULL = 'full',\n  TEMPORARY = 'temporary',\n}\n\n/**\n * Prefetch adds the provided FlightData to the prefetch cache\n * - Creates the router state tree based on the patch in FlightData\n * - Adds the FlightData to the prefetch cache\n * - In ACTION_NAVIGATE the prefetch cache is checked and the router state tree and FlightData are applied.\n */\nexport interface PrefetchAction {\n  type: typeof ACTION_PREFETCH\n  url: URL\n  kind: PrefetchKind\n}\n\nexport interface PushRef {\n  /**\n   * If the app-router should push a new history entry in app-router's useEffect()\n   */\n  pendingPush: boolean\n  /**\n   * Multi-page navigation through location.href.\n   */\n  mpaNavigation: boolean\n  /**\n   * Skip applying the router state to the browser history state.\n   */\n  preserveCustomHistoryState: boolean\n}\n\nexport type FocusAndScrollRef = {\n  /**\n   * If focus and scroll should be set in the layout-router's useEffect()\n   */\n  apply: boolean\n  /**\n   * The hash fragment that should be scrolled to.\n   */\n  hashFragment: string | null\n  /**\n   * The paths of the segments that should be focused.\n   */\n  segmentPaths: FlightSegmentPath[]\n  /**\n   * If only the URLs hash fragment changed\n   */\n  onlyHashChange: boolean\n}\n\nexport type PrefetchCacheEntry = {\n  treeAtTimeOfPrefetch: FlightRouterState\n  data: Promise<FetchServerResponseResult>\n  kind: PrefetchKind\n  prefetchTime: number\n  staleTime: number\n  lastUsedTime: number | null\n  key: string\n  status: PrefetchCacheEntryStatus\n  url: URL\n}\n\nexport enum PrefetchCacheEntryStatus {\n  fresh = 'fresh',\n  reusable = 'reusable',\n  expired = 'expired',\n  stale = 'stale',\n}\n\n/**\n * Handles keeping the state of app-router.\n */\nexport type AppRouterState = {\n  /**\n   * The buildId is used to do a mpaNavigation when the server returns a different buildId.\n   * It is used to avoid issues where an older version of the app is loaded in the browser while the server has a new version.\n   */\n  buildId: string\n  /**\n   * The router state, this is written into the history state in app-router using replaceState/pushState.\n   * - Has to be serializable as it is written into the history state.\n   * - Holds which segments and parallel routes are shown on the screen.\n   */\n  tree: FlightRouterState\n  /**\n   * The cache holds React nodes for every segment that is shown on screen as well as previously shown segments.\n   * It also holds in-progress data requests.\n   * Prefetched data is stored separately in `prefetchCache`, that is applied during ACTION_NAVIGATE.\n   */\n  cache: CacheNode\n  /**\n   * Cache that holds prefetched Flight responses keyed by url.\n   */\n  prefetchCache: Map<string, PrefetchCacheEntry>\n  /**\n   * Decides if the update should create a new history entry and if the navigation has to trigger a browser navigation.\n   */\n  pushRef: PushRef\n  /**\n   * Decides if the update should apply scroll and focus management.\n   */\n  focusAndScrollRef: FocusAndScrollRef\n  /**\n   * The canonical url that is pushed/replaced.\n   * - This is the url you see in the browser.\n   */\n  canonicalUrl: string\n  /**\n   * The underlying \"url\" representing the UI state, which is used for intercepting routes.\n   */\n  nextUrl: string | null\n}\n\nexport type ReadonlyReducerState = Readonly<AppRouterState>\nexport type ReducerState = Promise<AppRouterState> | AppRouterState\nexport type ReducerActions = Readonly<\n  | RefreshAction\n  | NavigateAction\n  | RestoreAction\n  | ServerPatchAction\n  | PrefetchAction\n  | HmrRefreshAction\n  | ServerActionAction\n>\n","import type { DomainLocale } from '../server/config'\nimport type { normalizeLocalePath as NormalizeFn } from './normalize-locale-path'\nimport type { detectDomainLocale as DetectFn } from './detect-domain-locale'\nimport { normalizePathTrailingSlash } from './normalize-trailing-slash'\n\nconst basePath = (process.env.__NEXT_ROUTER_BASEPATH as string) || ''\n\nexport function getDomainLocale(\n  path: string,\n  locale?: string | false,\n  locales?: string[],\n  domainLocales?: DomainLocale[]\n) {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    const normalizeLocalePath: typeof NormalizeFn =\n      require('./normalize-locale-path').normalizeLocalePath\n    const detectDomainLocale: typeof DetectFn =\n      require('./detect-domain-locale').detectDomainLocale\n\n    const target = locale || normalizeLocalePath(path, locales).detectedLocale\n    const domain = detectDomainLocale(domainLocales, undefined, target)\n    if (domain) {\n      const proto = `http${domain.http ? '' : 's'}://`\n      const finalLocale = target === domain.defaultLocale ? '' : `/${target}`\n      return `${proto}${domain.domain}${normalizePathTrailingSlash(\n        `${basePath}${finalLocale}${path}`\n      )}`\n    }\n    return false\n  } else {\n    return false\n  }\n}\n","'use client'\n\nimport type {\n  NextRouter,\n  PrefetchOptions as RouterPrefetchOptions,\n} from '../shared/lib/router/router'\n\nimport React from 'react'\nimport type { UrlObject } from 'url'\nimport { resolveHref } from './resolve-href'\nimport { isLocalURL } from '../shared/lib/router/utils/is-local-url'\nimport { formatUrl } from '../shared/lib/router/utils/format-url'\nimport { isAbsoluteUrl } from '../shared/lib/utils'\nimport { addLocale } from './add-locale'\nimport { RouterContext } from '../shared/lib/router-context.shared-runtime'\nimport { AppRouterContext } from '../shared/lib/app-router-context.shared-runtime'\nimport type {\n  AppRouterInstance,\n  PrefetchOptions as AppRouterPrefetchOptions,\n} from '../shared/lib/app-router-context.shared-runtime'\nimport { useIntersection } from './use-intersection'\nimport { getDomainLocale } from './get-domain-locale'\nimport { addBasePath } from './add-base-path'\nimport { PrefetchKind } from './components/router-reducer/router-reducer-types'\nimport { useMergedRef } from './use-merged-ref'\n\ntype Url = string | UrlObject\ntype RequiredKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? never : K\n}[keyof T]\ntype OptionalKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? K : never\n}[keyof T]\n\ntype InternalLinkProps = {\n  /**\n   * The path or URL to navigate to. It can also be an object.\n   *\n   * @example https://nextjs.org/docs/api-reference/next/link#with-url-object\n   */\n  href: Url\n  /**\n   * Optional decorator for the path that will be shown in the browser URL bar. Before Next.js 9.5.3 this was used for dynamic routes, check our [previous docs](https://github.com/vercel/next.js/blob/v9.5.2/docs/api-reference/next/link.md#dynamic-routes) to see how it worked. Note: when this path differs from the one provided in `href` the previous `href`/`as` behavior is used as shown in the [previous docs](https://github.com/vercel/next.js/blob/v9.5.2/docs/api-reference/next/link.md#dynamic-routes).\n   */\n  as?: Url\n  /**\n   * Replace the current `history` state instead of adding a new url into the stack.\n   *\n   * @defaultValue `false`\n   */\n  replace?: boolean\n  /**\n   * Whether to override the default scroll behavior\n   *\n   * @example https://nextjs.org/docs/api-reference/next/link#disable-scrolling-to-the-top-of-the-page\n   *\n   * @defaultValue `true`\n   */\n  scroll?: boolean\n  /**\n   * Update the path of the current page without rerunning [`getStaticProps`](https://nextjs.org/docs/pages/building-your-application/data-fetching/get-static-props), [`getServerSideProps`](https://nextjs.org/docs/pages/building-your-application/data-fetching/get-server-side-props) or [`getInitialProps`](/docs/pages/api-reference/functions/get-initial-props).\n   *\n   * @defaultValue `false`\n   */\n  shallow?: boolean\n  /**\n   * Forces `Link` to send the `href` property to its child.\n   *\n   * @defaultValue `false`\n   */\n  passHref?: boolean\n  /**\n   * Prefetch the page in the background.\n   * Any `<Link />` that is in the viewport (initially or through scroll) will be prefetched.\n   * Prefetch can be disabled by passing `prefetch={false}`. Prefetching is only enabled in production.\n   *\n   * In App Router:\n   * - `null` (default): For statically generated pages, this will prefetch the full React Server Component data. For dynamic pages, this will prefetch up to the nearest route segment with a [`loading.js`](https://nextjs.org/docs/app/api-reference/file-conventions/loading) file. If there is no loading file, it will not fetch the full tree to avoid fetching too much data.\n   * - `true`: This will prefetch the full React Server Component data for all route segments, regardless of whether they contain a segment with `loading.js`.\n   * - `false`: This will not prefetch any data, even on hover.\n   *\n   * In Pages Router:\n   * - `true` (default): The full route & its data will be prefetched.\n   * - `false`: Prefetching will not happen when entering the viewport, but will still happen on hover.\n   * @defaultValue `true` (pages router) or `null` (app router)\n   */\n  prefetch?: boolean | null\n  /**\n   * The active locale is automatically prepended. `locale` allows for providing a different locale.\n   * When `false` `href` has to include the locale as the default behavior is disabled.\n   */\n  locale?: string | false\n  /**\n   * Enable legacy link behavior.\n   * @defaultValue `false`\n   * @see https://github.com/vercel/next.js/commit/489e65ed98544e69b0afd7e0cfc3f9f6c2b803b7\n   */\n  legacyBehavior?: boolean\n  /**\n   * Optional event handler for when the mouse pointer is moved onto Link\n   */\n  onMouseEnter?: React.MouseEventHandler<HTMLAnchorElement>\n  /**\n   * Optional event handler for when Link is touched.\n   */\n  onTouchStart?: React.TouchEventHandler<HTMLAnchorElement>\n  /**\n   * Optional event handler for when Link is clicked.\n   */\n  onClick?: React.MouseEventHandler<HTMLAnchorElement>\n}\n\n// TODO-APP: Include the full set of Anchor props\n// adding this to the publicly exported type currently breaks existing apps\n\n// `RouteInferType` is a stub here to avoid breaking `typedRoutes` when the type\n// isn't generated yet. It will be replaced when the webpack plugin runs.\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport type LinkProps<RouteInferType = any> = InternalLinkProps\ntype LinkPropsRequired = RequiredKeys<LinkProps>\ntype LinkPropsOptional = OptionalKeys<InternalLinkProps>\n\nconst prefetched = new Set<string>()\n\ntype PrefetchOptions = RouterPrefetchOptions & {\n  /**\n   * bypassPrefetchedCheck will bypass the check to see if the `href` has\n   * already been fetched.\n   */\n  bypassPrefetchedCheck?: boolean\n}\n\nfunction prefetch(\n  router: NextRouter | AppRouterInstance,\n  href: string,\n  as: string,\n  options: PrefetchOptions,\n  appOptions: AppRouterPrefetchOptions,\n  isAppRouter: boolean\n): void {\n  if (typeof window === 'undefined') {\n    return\n  }\n\n  // app-router supports external urls out of the box so it shouldn't short-circuit here as support for e.g. `replace` is added in the app-router.\n  if (!isAppRouter && !isLocalURL(href)) {\n    return\n  }\n\n  // We should only dedupe requests when experimental.optimisticClientCache is\n  // disabled & when we're not using the app router. App router handles\n  // reusing an existing prefetch entry (if it exists) for the same URL.\n  // If we dedupe in here, we will cause a race where different prefetch kinds\n  // to the same URL (ie auto vs true) will cause one to be ignored.\n  if (!options.bypassPrefetchedCheck && !isAppRouter) {\n    const locale =\n      // Let the link's locale prop override the default router locale.\n      typeof options.locale !== 'undefined'\n        ? options.locale\n        : // Otherwise fallback to the router's locale.\n          'locale' in router\n          ? router.locale\n          : undefined\n\n    const prefetchedKey = href + '%' + as + '%' + locale\n\n    // If we've already fetched the key, then don't prefetch it again!\n    if (prefetched.has(prefetchedKey)) {\n      return\n    }\n\n    // Mark this URL as prefetched.\n    prefetched.add(prefetchedKey)\n  }\n\n  const doPrefetch = async () => {\n    if (isAppRouter) {\n      // note that `appRouter.prefetch()` is currently sync,\n      // so we have to wrap this call in an async function to be able to catch() errors below.\n      return (router as AppRouterInstance).prefetch(href, appOptions)\n    } else {\n      return (router as NextRouter).prefetch(href, as, options)\n    }\n  }\n\n  // Prefetch the JSON page if asked (only in the client)\n  // We need to handle a prefetch error here since we may be\n  // loading with priority which can reject but we don't\n  // want to force navigation since this is only a prefetch\n  doPrefetch().catch((err) => {\n    if (process.env.NODE_ENV !== 'production') {\n      // rethrow to show invalid URL errors\n      throw err\n    }\n  })\n}\n\nfunction isModifiedEvent(event: React.MouseEvent): boolean {\n  const eventTarget = event.currentTarget as HTMLAnchorElement | SVGAElement\n  const target = eventTarget.getAttribute('target')\n  return (\n    (target && target !== '_self') ||\n    event.metaKey ||\n    event.ctrlKey ||\n    event.shiftKey ||\n    event.altKey || // triggers resource download\n    (event.nativeEvent && event.nativeEvent.which === 2)\n  )\n}\n\nfunction linkClicked(\n  e: React.MouseEvent,\n  router: NextRouter | AppRouterInstance,\n  href: string,\n  as: string,\n  replace?: boolean,\n  shallow?: boolean,\n  scroll?: boolean,\n  locale?: string | false,\n  isAppRouter?: boolean\n): void {\n  const { nodeName } = e.currentTarget\n\n  // anchors inside an svg have a lowercase nodeName\n  const isAnchorNodeName = nodeName.toUpperCase() === 'A'\n\n  if (\n    isAnchorNodeName &&\n    (isModifiedEvent(e) ||\n      // app-router supports external urls out of the box so it shouldn't short-circuit here as support for e.g. `replace` is added in the app-router.\n      (!isAppRouter && !isLocalURL(href)))\n  ) {\n    // ignore click for browser’s default behavior\n    return\n  }\n\n  e.preventDefault()\n\n  const navigate = () => {\n    // If the router is an NextRouter instance it will have `beforePopState`\n    const routerScroll = scroll ?? true\n    if ('beforePopState' in router) {\n      router[replace ? 'replace' : 'push'](href, as, {\n        shallow,\n        locale,\n        scroll: routerScroll,\n      })\n    } else {\n      router[replace ? 'replace' : 'push'](as || href, {\n        scroll: routerScroll,\n      })\n    }\n  }\n\n  if (isAppRouter) {\n    React.startTransition(navigate)\n  } else {\n    navigate()\n  }\n}\n\ntype LinkPropsReal = React.PropsWithChildren<\n  Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, keyof LinkProps> &\n    LinkProps\n>\n\nfunction formatStringOrUrl(urlObjOrString: UrlObject | string): string {\n  if (typeof urlObjOrString === 'string') {\n    return urlObjOrString\n  }\n\n  return formatUrl(urlObjOrString)\n}\n\n/**\n * A React component that extends the HTML `<a>` element to provide [prefetching](https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#2-prefetching)\n * and client-side navigation between routes.\n *\n * It is the primary way to navigate between routes in Next.js.\n *\n * Read more: [Next.js docs: `<Link>`](https://nextjs.org/docs/app/api-reference/components/link)\n */\nconst Link = React.forwardRef<HTMLAnchorElement, LinkPropsReal>(\n  function LinkComponent(props, forwardedRef) {\n    let children: React.ReactNode\n\n    const {\n      href: hrefProp,\n      as: asProp,\n      children: childrenProp,\n      prefetch: prefetchProp = null,\n      passHref,\n      replace,\n      shallow,\n      scroll,\n      locale,\n      onClick,\n      onMouseEnter: onMouseEnterProp,\n      onTouchStart: onTouchStartProp,\n      legacyBehavior = false,\n      ...restProps\n    } = props\n\n    children = childrenProp\n\n    if (\n      legacyBehavior &&\n      (typeof children === 'string' || typeof children === 'number')\n    ) {\n      children = <a>{children}</a>\n    }\n\n    const pagesRouter = React.useContext(RouterContext)\n    const appRouter = React.useContext(AppRouterContext)\n    const router = pagesRouter ?? appRouter\n\n    // We're in the app directory if there is no pages router.\n    const isAppRouter = !pagesRouter\n\n    const prefetchEnabled = prefetchProp !== false\n    /**\n     * The possible states for prefetch are:\n     * - null: this is the default \"auto\" mode, where we will prefetch partially if the link is in the viewport\n     * - true: we will prefetch if the link is visible and prefetch the full page, not just partially\n     * - false: we will not prefetch if in the viewport at all\n     */\n    const appPrefetchKind =\n      prefetchProp === null ? PrefetchKind.AUTO : PrefetchKind.FULL\n\n    if (process.env.NODE_ENV !== 'production') {\n      function createPropError(args: {\n        key: string\n        expected: string\n        actual: string\n      }) {\n        return new Error(\n          `Failed prop type: The prop \\`${args.key}\\` expects a ${args.expected} in \\`<Link>\\`, but got \\`${args.actual}\\` instead.` +\n            (typeof window !== 'undefined'\n              ? \"\\nOpen your browser's console to view the Component stack trace.\"\n              : '')\n        )\n      }\n\n      // TypeScript trick for type-guarding:\n      const requiredPropsGuard: Record<LinkPropsRequired, true> = {\n        href: true,\n      } as const\n      const requiredProps: LinkPropsRequired[] = Object.keys(\n        requiredPropsGuard\n      ) as LinkPropsRequired[]\n      requiredProps.forEach((key: LinkPropsRequired) => {\n        if (key === 'href') {\n          if (\n            props[key] == null ||\n            (typeof props[key] !== 'string' && typeof props[key] !== 'object')\n          ) {\n            throw createPropError({\n              key,\n              expected: '`string` or `object`',\n              actual: props[key] === null ? 'null' : typeof props[key],\n            })\n          }\n        } else {\n          // TypeScript trick for type-guarding:\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const _: never = key\n        }\n      })\n\n      // TypeScript trick for type-guarding:\n      const optionalPropsGuard: Record<LinkPropsOptional, true> = {\n        as: true,\n        replace: true,\n        scroll: true,\n        shallow: true,\n        passHref: true,\n        prefetch: true,\n        locale: true,\n        onClick: true,\n        onMouseEnter: true,\n        onTouchStart: true,\n        legacyBehavior: true,\n      } as const\n      const optionalProps: LinkPropsOptional[] = Object.keys(\n        optionalPropsGuard\n      ) as LinkPropsOptional[]\n      optionalProps.forEach((key: LinkPropsOptional) => {\n        const valType = typeof props[key]\n\n        if (key === 'as') {\n          if (props[key] && valType !== 'string' && valType !== 'object') {\n            throw createPropError({\n              key,\n              expected: '`string` or `object`',\n              actual: valType,\n            })\n          }\n        } else if (key === 'locale') {\n          if (props[key] && valType !== 'string') {\n            throw createPropError({\n              key,\n              expected: '`string`',\n              actual: valType,\n            })\n          }\n        } else if (\n          key === 'onClick' ||\n          key === 'onMouseEnter' ||\n          key === 'onTouchStart'\n        ) {\n          if (props[key] && valType !== 'function') {\n            throw createPropError({\n              key,\n              expected: '`function`',\n              actual: valType,\n            })\n          }\n        } else if (\n          key === 'replace' ||\n          key === 'scroll' ||\n          key === 'shallow' ||\n          key === 'passHref' ||\n          key === 'prefetch' ||\n          key === 'legacyBehavior'\n        ) {\n          if (props[key] != null && valType !== 'boolean') {\n            throw createPropError({\n              key,\n              expected: '`boolean`',\n              actual: valType,\n            })\n          }\n        } else {\n          // TypeScript trick for type-guarding:\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const _: never = key\n        }\n      })\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isAppRouter && !asProp) {\n        let href: string | undefined\n        if (typeof hrefProp === 'string') {\n          href = hrefProp\n        } else if (\n          typeof hrefProp === 'object' &&\n          typeof hrefProp.pathname === 'string'\n        ) {\n          href = hrefProp.pathname\n        }\n\n        if (href) {\n          const hasDynamicSegment = href\n            .split('/')\n            .some((segment) => segment.startsWith('[') && segment.endsWith(']'))\n\n          if (hasDynamicSegment) {\n            throw new Error(\n              `Dynamic href \\`${href}\\` found in <Link> while using the \\`/app\\` router, this is not supported. Read more: https://nextjs.org/docs/messages/app-dir-dynamic-href`\n            )\n          }\n        }\n      }\n    }\n\n    const { href, as } = React.useMemo(() => {\n      if (!pagesRouter) {\n        const resolvedHref = formatStringOrUrl(hrefProp)\n        return {\n          href: resolvedHref,\n          as: asProp ? formatStringOrUrl(asProp) : resolvedHref,\n        }\n      }\n\n      const [resolvedHref, resolvedAs] = resolveHref(\n        pagesRouter,\n        hrefProp,\n        true\n      )\n\n      return {\n        href: resolvedHref,\n        as: asProp\n          ? resolveHref(pagesRouter, asProp)\n          : resolvedAs || resolvedHref,\n      }\n    }, [pagesRouter, hrefProp, asProp])\n\n    const previousHref = React.useRef<string>(href)\n    const previousAs = React.useRef<string>(as)\n\n    // This will return the first child, if multiple are provided it will throw an error\n    let child: any\n    if (legacyBehavior) {\n      if (process.env.NODE_ENV === 'development') {\n        if (onClick) {\n          console.warn(\n            `\"onClick\" was passed to <Link> with \\`href\\` of \\`${hrefProp}\\` but \"legacyBehavior\" was set. The legacy behavior requires onClick be set on the child of next/link`\n          )\n        }\n        if (onMouseEnterProp) {\n          console.warn(\n            `\"onMouseEnter\" was passed to <Link> with \\`href\\` of \\`${hrefProp}\\` but \"legacyBehavior\" was set. The legacy behavior requires onMouseEnter be set on the child of next/link`\n          )\n        }\n        try {\n          child = React.Children.only(children)\n        } catch (err) {\n          if (!children) {\n            throw new Error(\n              `No children were passed to <Link> with \\`href\\` of \\`${hrefProp}\\` but one child is required https://nextjs.org/docs/messages/link-no-children`\n            )\n          }\n          throw new Error(\n            `Multiple children were passed to <Link> with \\`href\\` of \\`${hrefProp}\\` but only one child is supported https://nextjs.org/docs/messages/link-multiple-children` +\n              (typeof window !== 'undefined'\n                ? \" \\nOpen your browser's console to view the Component stack trace.\"\n                : '')\n          )\n        }\n      } else {\n        child = React.Children.only(children)\n      }\n    } else {\n      if (process.env.NODE_ENV === 'development') {\n        if ((children as any)?.type === 'a') {\n          throw new Error(\n            'Invalid <Link> with <a> child. Please remove <a> or use <Link legacyBehavior>.\\nLearn more: https://nextjs.org/docs/messages/invalid-new-link-with-extra-anchor'\n          )\n        }\n      }\n    }\n\n    const childRef: any = legacyBehavior\n      ? child && typeof child === 'object' && child.ref\n      : forwardedRef\n\n    const [setIntersectionRef, isVisible, resetVisible] = useIntersection({\n      rootMargin: '200px',\n    })\n\n    const setIntersectionWithResetRef = React.useCallback(\n      (el: Element) => {\n        // Before the link getting observed, check if visible state need to be reset\n        if (previousAs.current !== as || previousHref.current !== href) {\n          resetVisible()\n          previousAs.current = as\n          previousHref.current = href\n        }\n\n        setIntersectionRef(el)\n      },\n      [as, href, resetVisible, setIntersectionRef]\n    )\n\n    const setRef = useMergedRef(setIntersectionWithResetRef, childRef)\n\n    // Prefetch the URL if we haven't already and it's visible.\n    React.useEffect(() => {\n      // in dev, we only prefetch on hover to avoid wasting resources as the prefetch will trigger compiling the page.\n      if (process.env.NODE_ENV !== 'production') {\n        return\n      }\n\n      if (!router) {\n        return\n      }\n\n      // If we don't need to prefetch the URL, don't do prefetch.\n      if (!isVisible || !prefetchEnabled) {\n        return\n      }\n\n      // Prefetch the URL.\n      prefetch(\n        router,\n        href,\n        as,\n        { locale },\n        {\n          kind: appPrefetchKind,\n        },\n        isAppRouter\n      )\n    }, [\n      as,\n      href,\n      isVisible,\n      locale,\n      prefetchEnabled,\n      pagesRouter?.locale,\n      router,\n      isAppRouter,\n      appPrefetchKind,\n    ])\n\n    const childProps: {\n      onTouchStart?: React.TouchEventHandler<HTMLAnchorElement>\n      onMouseEnter: React.MouseEventHandler<HTMLAnchorElement>\n      onClick: React.MouseEventHandler<HTMLAnchorElement>\n      href?: string\n      ref?: any\n    } = {\n      ref: setRef,\n      onClick(e) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (!e) {\n            throw new Error(\n              `Component rendered inside next/link has to pass click event to \"onClick\" prop.`\n            )\n          }\n        }\n\n        if (!legacyBehavior && typeof onClick === 'function') {\n          onClick(e)\n        }\n\n        if (\n          legacyBehavior &&\n          child.props &&\n          typeof child.props.onClick === 'function'\n        ) {\n          child.props.onClick(e)\n        }\n\n        if (!router) {\n          return\n        }\n\n        if (e.defaultPrevented) {\n          return\n        }\n\n        linkClicked(\n          e,\n          router,\n          href,\n          as,\n          replace,\n          shallow,\n          scroll,\n          locale,\n          isAppRouter\n        )\n      },\n      onMouseEnter(e) {\n        if (!legacyBehavior && typeof onMouseEnterProp === 'function') {\n          onMouseEnterProp(e)\n        }\n\n        if (\n          legacyBehavior &&\n          child.props &&\n          typeof child.props.onMouseEnter === 'function'\n        ) {\n          child.props.onMouseEnter(e)\n        }\n\n        if (!router) {\n          return\n        }\n\n        if (\n          (!prefetchEnabled || process.env.NODE_ENV === 'development') &&\n          isAppRouter\n        ) {\n          return\n        }\n\n        prefetch(\n          router,\n          href,\n          as,\n          {\n            locale,\n            priority: true,\n            // @see {https://github.com/vercel/next.js/discussions/40268?sort=top#discussioncomment-3572642}\n            bypassPrefetchedCheck: true,\n          },\n          {\n            kind: appPrefetchKind,\n          },\n          isAppRouter\n        )\n      },\n      onTouchStart: process.env.__NEXT_LINK_NO_TOUCH_START\n        ? undefined\n        : function onTouchStart(e) {\n            if (!legacyBehavior && typeof onTouchStartProp === 'function') {\n              onTouchStartProp(e)\n            }\n\n            if (\n              legacyBehavior &&\n              child.props &&\n              typeof child.props.onTouchStart === 'function'\n            ) {\n              child.props.onTouchStart(e)\n            }\n\n            if (!router) {\n              return\n            }\n\n            if (!prefetchEnabled && isAppRouter) {\n              return\n            }\n\n            prefetch(\n              router,\n              href,\n              as,\n              {\n                locale,\n                priority: true,\n                // @see {https://github.com/vercel/next.js/discussions/40268?sort=top#discussioncomment-3572642}\n                bypassPrefetchedCheck: true,\n              },\n              {\n                kind: appPrefetchKind,\n              },\n              isAppRouter\n            )\n          },\n    }\n\n    // If child is an <a> tag and doesn't have a href attribute, or if the 'passHref' property is\n    // defined, we specify the current 'href', so that repetition is not needed by the user.\n    // If the url is absolute, we can bypass the logic to prepend the domain and locale.\n    if (isAbsoluteUrl(as)) {\n      childProps.href = as\n    } else if (\n      !legacyBehavior ||\n      passHref ||\n      (child.type === 'a' && !('href' in child.props))\n    ) {\n      const curLocale =\n        typeof locale !== 'undefined' ? locale : pagesRouter?.locale\n\n      // we only render domain locales if we are currently on a domain locale\n      // so that locale links are still visitable in development/preview envs\n      const localeDomain =\n        pagesRouter?.isLocaleDomain &&\n        getDomainLocale(\n          as,\n          curLocale,\n          pagesRouter?.locales,\n          pagesRouter?.domainLocales\n        )\n\n      childProps.href =\n        localeDomain ||\n        addBasePath(addLocale(as, curLocale, pagesRouter?.defaultLocale))\n    }\n\n    return legacyBehavior ? (\n      React.cloneElement(child, childProps)\n    ) : (\n      <a {...restProps} {...childProps}>\n        {children}\n      </a>\n    )\n  }\n)\n\nexport default Link\n","import { useCallback, useEffect, useRef, useState } from 'react'\nimport {\n  requestIdleCallback,\n  cancelIdleCallback,\n} from './request-idle-callback'\n\ntype UseIntersectionObserverInit = Pick<\n  IntersectionObserverInit,\n  'rootMargin' | 'root'\n>\n\ntype UseIntersection = { disabled?: boolean } & UseIntersectionObserverInit & {\n    rootRef?: React.RefObject<HTMLElement | null> | null\n  }\ntype ObserveCallback = (isVisible: boolean) => void\ntype Identifier = {\n  root: Element | Document | null\n  margin: string\n}\ntype Observer = {\n  id: Identifier\n  observer: IntersectionObserver\n  elements: Map<Element, ObserveCallback>\n}\n\nconst hasIntersectionObserver = typeof IntersectionObserver === 'function'\n\nconst observers = new Map<Identifier, Observer>()\nconst idList: Identifier[] = []\n\nfunction createObserver(options: UseIntersectionObserverInit): Observer {\n  const id = {\n    root: options.root || null,\n    margin: options.rootMargin || '',\n  }\n  const existing = idList.find(\n    (obj) => obj.root === id.root && obj.margin === id.margin\n  )\n  let instance: Observer | undefined\n\n  if (existing) {\n    instance = observers.get(existing)\n    if (instance) {\n      return instance\n    }\n  }\n\n  const elements = new Map<Element, ObserveCallback>()\n  const observer = new IntersectionObserver((entries) => {\n    entries.forEach((entry) => {\n      const callback = elements.get(entry.target)\n      const isVisible = entry.isIntersecting || entry.intersectionRatio > 0\n      if (callback && isVisible) {\n        callback(isVisible)\n      }\n    })\n  }, options)\n  instance = {\n    id,\n    observer,\n    elements,\n  }\n\n  idList.push(id)\n  observers.set(id, instance)\n  return instance\n}\n\nfunction observe(\n  element: Element,\n  callback: ObserveCallback,\n  options: UseIntersectionObserverInit\n): () => void {\n  const { id, observer, elements } = createObserver(options)\n  elements.set(element, callback)\n\n  observer.observe(element)\n  return function unobserve(): void {\n    elements.delete(element)\n    observer.unobserve(element)\n\n    // Destroy observer when there's nothing left to watch:\n    if (elements.size === 0) {\n      observer.disconnect()\n      observers.delete(id)\n      const index = idList.findIndex(\n        (obj) => obj.root === id.root && obj.margin === id.margin\n      )\n      if (index > -1) {\n        idList.splice(index, 1)\n      }\n    }\n  }\n}\n\nexport function useIntersection<T extends Element>({\n  rootRef,\n  rootMargin,\n  disabled,\n}: UseIntersection): [(element: T | null) => void, boolean, () => void] {\n  const isDisabled: boolean = disabled || !hasIntersectionObserver\n\n  const [visible, setVisible] = useState(false)\n  const elementRef = useRef<T | null>(null)\n  const setElement = useCallback((element: T | null) => {\n    elementRef.current = element\n  }, [])\n\n  useEffect(() => {\n    if (hasIntersectionObserver) {\n      if (isDisabled || visible) return\n\n      const element = elementRef.current\n      if (element && element.tagName) {\n        const unobserve = observe(\n          element,\n          (isVisible) => isVisible && setVisible(isVisible),\n          { root: rootRef?.current, rootMargin }\n        )\n\n        return unobserve\n      }\n    } else {\n      if (!visible) {\n        const idleCallback = requestIdleCallback(() => setVisible(true))\n        return () => cancelIdleCallback(idleCallback)\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isDisabled, rootMargin, rootRef, visible, elementRef.current])\n\n  const resetVisible = useCallback(() => {\n    setVisible(false)\n  }, [])\n\n  return [setElement, visible, resetVisible]\n}\n","import { useMemo, useRef, type Ref } from 'react'\n\n// This is a compatibility hook to support React 18 and 19 refs.\n// In 19, a cleanup function from refs may be returned.\n// In 18, returning a cleanup function creates a warning.\n// Since we take userspace refs, we don't know ahead of time if a cleanup function will be returned.\n// This implements cleanup functions with the old behavior in 18.\n// We know refs are always called alternating with `null` and then `T`.\n// So a call with `null` means we need to call the previous cleanup functions.\nexport function useMergedRef<TElement>(\n  refA: Ref<TElement>,\n  refB: Ref<TElement>\n): Ref<TElement> {\n  const cleanupA = useRef<() => void>(() => {})\n  const cleanupB = useRef<() => void>(() => {})\n\n  return useMemo(() => {\n    if (!refA || !refB) {\n      return refA || refB\n    }\n\n    return (current: TElement | null): void => {\n      if (current === null) {\n        cleanupA.current()\n        cleanupB.current()\n      } else {\n        cleanupA.current = applyRef(refA, current)\n        cleanupB.current = applyRef(refB, current)\n      }\n    }\n  }, [refA, refB])\n}\n\nfunction applyRef<TElement>(\n  refA: NonNullable<Ref<TElement>>,\n  current: TElement\n) {\n  if (typeof refA === 'function') {\n    const cleanup = refA(current)\n    if (typeof cleanup === 'function') {\n      return cleanup\n    } else {\n      return () => refA(null)\n    }\n  } else {\n    refA.current = current\n    return () => {\n      refA.current = null\n    }\n  }\n}\n","module.exports = require('./dist/client/link')\n"],"names":["ACTION_HMR_REFRESH","ACTION_NAVIGATE","ACTION_PREFETCH","ACTION_REFRESH","ACTION_RESTORE","ACTION_SERVER_ACTION","ACTION_SERVER_PATCH","PrefetchKind","PrefetchCacheEntryStatus","getDomainLocale","path","locale","locales","domainLocales","prefetched","Set","prefetch","router","href","window","prefetchedKey","as","options","undefined","isAppRouter","process","env","NODE_ENV","urlObjOrString","children","childrenProp","legacyBehavior","a","appRouter","React","useContext","AppRouterContext","pagesRouter","prefetchEnabled","prefetchProp","resolvedHref","asProp","formatStringOrUrl","resolveHref","previousAs","useRef","setIntersectionRef","isVisible","useIntersection","resetVisible","rootMargin","previousHref","current","kind","appPrefetchKind","ref","setRef","onClick","e","child","props","currentTarget","isModifiedEvent","isLocalURL","event","eventTarget","getAttribute","metaKey","nativeEvent","which","navigate","replace","shallow","scroll","routerScroll","onMouseEnter","onMouseEnterProp","priority","onTouchStart","onTouchStartProp","childProps","curLocale","localeDomain","addBasePath","addLocale","defaultLocale","restProps","hasIntersectionObserver","IntersectionObserver","observers","Map","idList","rootRef","disabled","isDisabled","visible","setVisible","useState","elementRef","setElement","useCallback","element","useEffect","tagName","observe","callback","id","observer","elements","createObserver","instance","root","margin","existing","find","obj","get","entries","forEach","entry","target","isIntersecting","intersectionRatio","push","set","unobserve","delete","size","disconnect","index","findIndex","splice","idleCallback","requestIdleCallback","cancelIdleCallback","useMergedRef","refA","refB","cleanupA","cleanupB","useMemo","applyRef","cleanup"],"sourceRoot":"","ignoreList":[5]}